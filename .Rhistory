myFile <- read.csv(file.choose())
install.packages("ggplot2")
ggplot(data = myFile, aes(x=carat, y=price)) + geom_point()
install.packages("ggplot2")
ggplot(data = myFile, aes(x=carat, y=price)) + geom_point()
result <- 0
input <- readline("Enter value of n ie the sample size to check law of large numbers")
while(input > 0)
{
check <- rnorm(1)
if(check <= 1 & check >= -1)
{
result <- result + 1
}
input <- input - 1
}
answer <- (result/input1)*100
answer
?ggplot()
install.packages("ggplot2")
?ggplot()
?ggplot()
?ggplot()
library(ggplot2)
?ggplot()
?plyr()
?ggplot()
?diamonds()
hist(diamonds)
hist(diamonds.price)
hist(diamonds->price)
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
monthly_profit <- revenue - expenses
monthly_profit
profit_after_tax <- 0.7 * monthly_profit
profit_after_tax
profit_after_tax
profit_margin <- profit_after_tax / revenue
profit_margin
profit_margin
mean(profit_after_tax)
?append
for(i in profit_after_tax)
{
if(i > mean(profit_after_tax))
append(good_months, i)
else
append(bad_months, i)
}
good_months <- c(NA, 12)
bad_months <- c(NA, 12)
for(i in profit_after_tax)
{
if(i > mean(profit_after_tax))
append(good_months, i)
else
append(bad_months, i)
}
good_months
good_months <- c(NA, 0)
bad_months <- c(NA, 0)
for(i in profit_after_tax)
{
if(i > mean(profit_after_tax))
append(good_months, i)
else
append(bad_months, i)
}
good_months
good_months <- 0
bad_months <- 0
for(i in profit_after_tax)
{
if(i > mean(profit_after_tax))
append(good_months, i)
else
append(bad_months, i)
}
good_months
monthly_profit <- revenue - expenses
monthly_profit
profit_after_tax <- 0.7 * monthly_profit
profit_after_tax
profit_margin <- profit_after_tax / revenue
profit_margin
good_months <- 0
bad_months <- 0
for(i in profit_after_tax)
{
if(i > mean(profit_after_tax))
append(good_months, i)
else
append(bad_months, i)
}
good_months
install.packages("tm")
df<- data.frame(runif(3), runif(3))
head(df)
?names()
names(df)
getwd()
setwd("C://Users//Rahul//Desktop//R Programming//Kirill---Advanced-Analytics-In-R-For-Data-Science")
# This was basic import: fin <- read.csv(file.choose())
fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings = "")
head(fin, 10)
str(fin)
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
summary(fin)
str(fin)
ex1 <- c("Hello", "my", "name", "is", "khan", "oh", "my", "my")
ex1
typeof(ex1)
#----------- Converting this to a R factor (cause that is what will happen when you'll import such data!!!)-----------
ex1 <- factor(ex1)
typeof(ex1)
ex1
summary(ex1)
str(ex1)
#------------To convert this ex1 from factor to normal double or integer...we'll do the following-------------------
ex2 <- as.character(ex1)
ex2
#---------------------Now, try something different shall we---------------------------------------------------
ex3 <- c("14", "12", "13", "14", "12", "12")
ex3
ex4 <- as.numeric(ex3)
ex4 #-------------Yaaay----------------
ex3 <- factor(ex3)
ex3
typeof(ex3)
ex5 <- as.numeric(ex3)
ex5    #-------------Hawwww, yaha to kata hai apna!!-----------------------
ex5 <- as.numeric(as.character(ex3))
ex5
#-------------------That's it...Thank You!!---------------------------------
head(fin)
fin$Expenses <- gsub(" Dollars", "", fin$Expenses)
fin$Expenses <- gsub(",", "", fin$Expenses)
head(fin, 10)
fin$Revenue <- gsub(",", "", fin$Revenue)
fin$Revenue <- gsub("\\$", "", fin$Revenue)
head(fin, 20)
fin$Growth <- gsub("%", "", fin$Growth)
head(fin, 20)
tail(fin, 20)
fin[!complete.cases(fin), ]
fin[is.na(fin$Expenses),]
fin_backup <- fin
fin_backup
fin[!complete.cases(fin$Industry), ]
fin[!is.na(fin$Industry), ]
fin <- fin[!is.na(fin$Industry), ]
head(fin, 20)
fin[!complete.cases(fin), ]
fin_backup1 <- fin
rownames(fin) <- 1: nrow(fin)
fin
fin[is.na(fin$State), ]
fin[is.na(fin$State) & fin$City == "New York", "State"] <- "NY" #Just like arr[2,3]; Here the filter(is.na(fin$State) & fin$City == "New York") was used to specify the rows and "State" is used to specify the column and by using "<-", we are assigning that block some value..
fin[is.na(fin$State), ]
fin[is.na(fin$State) & fin$City == "San Francisco", "State"] <- "CA"
fin[!complete.cases(fin), ]
fin[c(11,82,265,377), ]
fin[!complete.cases(fin), ]
median_emp_retail <- median(fin[fin$Industry == "Retail","Employees"], na.rm = TRUE)
median_emp_retail
median_emp_finserv <- median(fin[fin$Industry == "Financial Services", "Employees"], na.rm = TRUE)
median_emp_finserv
fin[is.na(fin$Employees) & fin$Industry == "Financial Services","Employees"] <- median_emp_finserv
fin[c(3,330), ]
rownames(fin) <- 1: nrow(fin)
fin
rownames(fin) <- NULL
fin
nrow(fin)
rownames(fin) <- 1: nrow(fin)
fin
fin[is.na(fin$State), ]
fin[is.na(fin$State), ]
getwd()
setwd("C://Users//Rahul//Desktop//R Programming//Kirill---Advanced-Analytics-In-R-For-Data-Science")
# This was basic import: fin <- read.csv(file.choose())
fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings = "")
head(fin, 10)
tail(fin, 20)
str(fin)
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
str(fin)
#-------------------That's it...Thank You!!---------------------------------
head(fin)
fin$Expenses <- gsub(" Dollars", "", fin$Expenses)
fin$Expenses <- gsub(",", "", fin$Expenses)
head(fin, 10)
fin$Revenue <- gsub(",", "", fin$Revenue)
fin$Revenue <- gsub("\\$", "", fin$Revenue)
head(fin, 20)
fin$Growth <- gsub("%", "", fin$Growth)
head(fin, 20)
tail(fin, 20)
fin[!complete.cases(fin), ]
fin[is.na(fin$Expenses),]
fin_backup <- fin
fin_backup
fin[!complete.cases(fin$Industry), ]
fin[!is.na(fin$Industry), ]
fin <- fin[!is.na(fin$Industry), ]
head(fin, 20)
fin[!complete.cases(fin), ]
fin_backup1 <- fin
rownames(fin) <- 1: nrow(fin)
fin
fin[is.na(fin$State), ]
fin[is.na(fin$State) & fin$City == "New York", "State"] <- "NY" #Just like arr[2,3]; Here the filter(is.na(fin$State) & fin$City == "New York") was used to specify the rows and "State" is used to specify the column and by using "<-", we are assigning that block some value..
fin[is.na(fin$State), ]
fin[is.na(fin$State) & fin$City == "San Francisco", "State"] <- "CA"
fin[c(11,82,265,377), ]
median_emp_retail <- median(fin[fin$Industry == "Retail","Employees"], na.rm = TRUE)
median_emp_retail
fin[is.na(fin$Employees) & fin$Industry == "Retail", "Employees"] <- median_emp_retail
median_emp_finserv <- median(fin[fin$Industry == "Financial Services", "Employees"], na.rm = TRUE)
median_emp_finserv
fin[is.na(fin$Employees) & fin$Industry == "Financial Services","Employees"] <- median_emp_finserv
fin[c(3,330), ]
#-----------------------------------Median imputation for Growth, Revenue and Expenses---------------------------------------------------------------------------------------
fin[!complete.cases(fin), ]
med_growth_constr <- median(fin[fin$Industry == "Construction", "Growth"], na.rm = TRUE)
med_growth_constr
fin[is.na(fin$Growth) & fin$Industry == "Construction", "Growth" ] <- med_growth_constr
fin[8, ]
fin[!complete.cases(fin), ]
median_revenue_const <- median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
median_revenue_const <- median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
median_revenue_const <- median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
fin[fin$Industry == "Construction", "Revenue"]
median_revenue_const <- median(fin[fin$Industry == "Construction", "Revenue"])
median_revenue_const
median(fin[fin$Industry == "Construction", "Revenue"], na.rm = T)
median_revenue_const <- median(fin[fin$Industry == "Construction", "Revenue"], na.rm = T)
fin[!complete.cases(fin), ]
median_profit_const <- median(fin[fin$Industry == "Construction", "Profit"], na.rm = T)
median_profit_const
fin[!complete.cases(fin), ]
fin[is.na(fin$Revenue), "Revenue"]
fin[is.na(fin$Revenue), "Revenue"] <- as.numeric(fin[is.na(fin$Revenue), "Revenue"])
fin[!complete.cases(fin), ]
str(fin)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Expenses <- as.numeric(fin$Expenses)
str(fin)
fin[!complete.cases(fin), ]
fin[8, "Growth"]
fin[8, "Growth"] <- NA
fin[8, "Growth"]
#-----------------------------------Median imputation for Growth, Revenue and Expenses---------------------------------------------------------------------------------------
fin[!complete.cases(fin), ]
median(fin[fin$Industry== "Construction", "Growth"], na.rm = TRUE)
#-----------------------------------Median imputation for Growth, Revenue and Expenses---------------------------------------------------------------------------------------
fin[!complete.cases(fin), ]
median_growth_const <- median(fin[,"Growth"])
median_growth_const
median_growth_const <- median(fin[,"Growth"], na.rm = TRUE)
median_growth_const
median_growth_const <- median(fin[fin$Industry== "Construction","Growth"], na.rm = TRUE)
median_growth_const
fin[8, ]
#-----------------------------------Median imputation for Growth, Revenue and Expenses---------------------------------------------------------------------------------------
str(fin)
fin$Growth <- as.numeric(fin$Growth)
fin[!complete.cases(fin), ]
median_growth_const <- median(fin[fin$Industry== "Construction","Growth"], na.rm = TRUE)
median_growth_const
median_growth_const
fin[is.na(fin$Industry) & fin$Industry== "Construction", "Growth"]
fin[is.na(fin$Industry) & fin$Industry== "Construction", "Growth"] <- median_growth_const
fin[8, ]
fin[is.na(fin$Growth) & fin$Industry== "Construction", "Growth"]
fin[is.na(fin$Growth) & fin$Industry== "Construction", "Growth"] <- median_growth_const
fin[8, ]
fin[!complete.cases(fin), ]
median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
median_revenue_const <- median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
median_revenue_const
fin[is.na(fin$Revenue) & fin$Industry == "Construction", "Revenue"]
fin[is.na(fin$Revenue) & fin$Industry == "Construction", "Revenue"] <- median_revenue_const
fin[is.na(fin$Revenue) & fin$Industry == "Construction", "Revenue"]
median_revenue_const <- median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
median_revenue_const
fin[is.na(fin$Revenue) & fin$Industry == "Construction", "Revenue"] <- median_revenue_const
fin[8, ]
fin[c(8,42),  ]
median_expense_const <- median(fin[fin$Industry == "Construction", "Expenses"], na.rm = TRUE)
median_expense_const
fin[is.na(fin$Expenses) & fin$Industry == "Construction", "Expenses"]
fin[is.na(fin$Expenses) & fin$Industry == "Construction", "Expenses"] <- median_expense_const
fin[c(8, 42), ]
median_expense_it <- median(fin[fin$Industry == "IT Services", "Expenses"], na.rm == TRUE)
median_expense_it <- median(fin[fin$Industry == "IT Services", "Expenses"], na.rm = TRUE)
median_expense_it
fin[!complete.cases(fin), ]
fin[c(8, 42), ]
#----------------------------------------Filling in the logical entries------------------------------------------------------
fin[is.na(fin$Profit), ]
#----------------------------------------Filling in the logical entries------------------------------------------------------
fin[is.na(fin$Profit), ]
fin[is.na(fin$Profit), "Profit"] <- fin[is.na(fin$Profit), "Revenue"] - fin[is.na(fin$Profit), "Expenses"]
fin[c(8,42), ]
fin(!complete.cases(fin), )
fin[!complete.cases(fin), ]
fin[is.na(fin$Expenses), ]
fin[is.na(fin$Expenses), "Expenses"] <- fin[is.na(fin$Expenses), "Revenue"] - fin[is.na(fin$Expenses), "Profit"]
fin[15, ]
fin[!complete.cases(fin), ]
p <- ggplot(data = fin)
#-------------------------Done with the data cleaning part, now onto the visualisation part----------------------------------------
library("ggplot2")
p <- ggplot(data = fin)
p
p + geom_points()
p + geom_point()
p + geom_point(aes(x = Revenue, y = Expenses, color = "Industry") )
p + geom_point(aes(x = Revenue, y = Expenses, color = Industry) )
p + geom_point(aes(x = Revenue, y = Expenses, color = Industry, size = Profit) )
p + geom_point(aes(x = Revenue, y = Expenses, color = Industry, size = Profit) )
fin[!is.na(fin$Industry), ]
?geom_point()
?aes
#-------------------------Boxplot #2----------------------------------------------------
q <- ggplot(data = fin, aes(x = Revenue, y = Expenses, colour = Industry))
q + geom_point()
source('C:/Users/Rahul/Desktop/R Programming/Kirill---Advanced-Analytics-In-R-For-Data-Science/Section2.R', echo=TRUE)
#----------------------------Boxplot-----------------------------------------------
r <- ggplot(data = fin, aes(x = Industry, y = Growth, colour = Industry))
r + geom_boxplot(size = 1)
r + geom_jitter() + geom_boxplot(size = 1, alpha = 0.5)
r + geom_jitter() + geom_boxplot(size = 1, alpha = 0.5, outlier.colour = NA)
getwd()
util <- read.csv(P3-Machine-Utilization.csv)
util <- read.csv("P3-Machine-Utilization.csv")
head(util, 20)
str(util)
summary(util)
util$Utilization <- 1 - util$Percent.Idle
head(util, 25)
util$PosixTime <- as.POSIXct(util$Timestamp, "%d/%m/%Y %H:%M")
head(util)
head(util, 20)
summary(util)
as.POSIXct(util$Timestamp, "%d/%m/%Y %H:%M")
util$Timestamp <- NULL
head(util, 20)
util <- util[, c(4,1,2,3)]
head(util, 20)
getwd()
util <- read.csv("P3-Machine-Utilization.csv")
head(util, 20)
str(util)
summary(util)
#-------------------Deriving the Utilization column---------------------------------
util$Utilization <- 1 - util$Percent.Idle
head(util, 25)
util$PosixTime <- as.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")
head(util, 20)
as.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")
head(util, 20)
summary(util)
#--------------------------------Rearranging the columns---------------------------------------
util$Timestamp <- NULL
head(util, 20)
util <- util[, c(4,1,2,3)]
head(util, 20)
#-------------------------------Subsetting the list(Since we are only to work with RL1)----------------------------
RL1 <- util[util$Machine == "RL1", ]
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
summary(Machine)
summary(RL1)
RL1_stats <- c(min(RL1$Utilization, na.rm = TRUE),
mean(RL1$Utilization, na.rm = TRUE),
max(RL1$Utilization, na.rm = TRUE))
RL1_stats
length(which(RL1$Utilization < 0.90))
util_under_90 <- as.logical(length(which(RL1$Utilization < 0.90)))
util_under_90
list_RL1 <- list("RL1", RL1_stats, util_under_90)
list_RL1
names(list_RL1)
names(list_RL1) <- c("Machine","Stats","LowThreshold")
names(list_RL1)
list_RL1
list_RL1[1]
list_RL1[[1]]
list_RL1$Machine
list_RL1[2]
list_RL1[[2]]
list_RL1$Stats
typeof(list_RL1[2])
typeof(list_RL[[2]])
typeof(list_RL1[[2]])
typeof(list_RL1$Stats)
List_RL1[[3]]
list_RL1[[3]]
[list_RL1[[2]],]
list_RL1[list_RL1[[2]],]
list_RL1[[2][2]]
list_RL1[[2, 2]]
list_RL1$Stats[3]
list_RL1$Stats
list_RL1$Stats[2]
list_RL1$Stats[3]
list_RL1$Stats[1]
list_RL1$Stats[2]
#------------------------Adding and deleting list components------------------------------------
list_RL1$UnknownHours <- RL1[is.na(RL1$Utilization), "PosixTime"]
list_RL1
list_RL1[5] <- "New Information"
list_RL1
list_RL1[8] <- "Testing out new stuff"
list_RL1
#------------Deleting
list_RL1[8] <- NULL
list_RL1
#------------Deleting
list_RL1[5: 7] <- NULL
list_RL1
list_RL1$DataFrame <- RL1
list_RL1
summary(list_RL1)
list_RL1[[4]][1]
#----------------------Plotting time-plots--------------------------------------
library(ggplot2)
p <- ggpplot(data = util)
#----------------------Plotting time-plots--------------------------------------
library(ggplot2)
p <- ggpplot(data = util)
p <- ggplot(data = util)
p <- ggplot(data = util)
p + geom_point(aes(x = PosixTime, y = Utilization, colour = Machine), size = 1.2) +
facet_grid(Machine~.)
p <- ggplot(data = util)
p + geom_point(aes(x = PosixTime, y = Utilization, colour = Machine), size = 1.2) +
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, color = "Gray")
p <- ggplot(data = util)
p + geom_point(aes(x = PosixTime, y = Utilization, colour = Machine), size = 1.2) +
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, color = "Gray",linetype = 3)
p + geom_point(aes(x = PosixTime, y = Utilization, colour = Machine), size = 1.2) +
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, color = "DarkGreen",linetype = 3)
myplot <- p + geom_point(aes(x = PosixTime, y = Utilization, colour = Machine), size = 1.2) +
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, color = "DarkGreen",linetype = 3)
myplot
list_RL1$Plot <- myplot
list_RL1
str(list_RL1)
getwd()
Chicago <- read.csv("Chicago-F.csv")
NewYork <- read.csv("NewYork-F")
Houston <- read.csv("Houston-F")
SanFrancisco <- read.csv("SanFrancisco-F")
Chicago <- read.csv("Chicago-F.csv")
NewYork <- read.csv("NewYork-F.csv")
Houston <- read.csv("Houston-F.csv")
SanFrancisco <- read.csv("SanFrancisco-F.csv")
Chicago
Chicago <- read.csv("Chicago-F.csv", row.names = 1)
NewYork <- read.csv("NewYork-F.csv", row.names = 1)
Houston <- read.csv("Houston-F.csv", row.names = 1)
SanFrancisco <- read.csv("SanFrancisco-F.csv", row.names = 1)
Chicago
Chicago     <-as.matrix(Chicago)
NewYork     <-as.matrix(NewYork)
Houston     <-as.matrix(Houston)
SanFrancisco<-as.matrix(SanFrancisco)
is.data.frame(Chicago)
Weather <- list(Chicago, NewYork, Houston, SanFrancisco)
Weather
names(Weather)
names(Weather) <- c("Chicago", "NewYork", "Houston", "SanFrancisco")
names(Weather)
#--------------------------Getting started with the apply function-------------------------
apply(Chicago, 1, mean)
apply(Chicago, 2, mean)
lapply(Weather, rowMeans)
Weather
lapply(Weather, rowMeans)
lapply(Weather, max)
lapply(Weather, function(x) x[1, ])
lapply(Weather, function(x) round((x[1, ] - x[2, ])/x[2, ], 2)
lapply(Weather, function(x) round((x[1, ] - x[2, ])/x[2, ], 2))
lapply(Weather, function(x) round((x[1, ] - x[2, ])/x[2, ], 2)))
lapply(Weather, function(x) round((z[1, ] - z[2, ])/z[2, ], 2))
lapply(Weather, function(z) round((z[1, ] - z[2, ])/z[2, ], 2))
lapply(Weather, function(z) round((z[2, ] - z[1, ])/z[2, ],2))
#-------------------------Setting up the deliverables------------------------------------------
lapply(Weather, rowMeans)
sapply(Weather, rowMeans)
sapply(Weather, function(z) round((z[1, ] - z[2, ])/z[2, ],2))
sapply(Weather, function(z) round((z[1, ] - z[2, ])/z[2, ],2)) #Deliverable 2
sapply(Weather, apply, 1, max)
sapply(Weather, apply, 1, min)
max(Chicago[1, ])
Chicago
which.max(Chicago[1, ])
names(which.max(Chicago[1, ]))
apply(Chicago, 1, function(x) names(which.max(x)))
lapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x))))
sapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x))))
